
diff --git a/FirebaseCrashH2/src/email_helper.py b/FirebaseCrashH2/src/email_helper.py
index 3f9e8a6..effea7e 100755
--- a/FirebaseCrashH2/src/email_helper.py
+++ b/FirebaseCrashH2/src/email_helper.py
@@ -88,16 +88,15 @@ class Report:
 	#[ios]"https://console.firebase.google.com/u/0/project/booking-oauth/crashlytics/app/ios:com.booking.BookingApp/issues/{issue_id}?time=last-twenty-four-hours"
 	# {bookingApp} ios:com.booking.BookingApp 
 	### {timeslot}last-twenty-four-hours
-
-	# DQS url :
-	url_crashlist_template = "https://firebase-app-crash.dqs.booking.com/crashdetail_user/{userconfig_id}/"
-	url_userconfig_template = 'https://firebase-app-crash.dqs.booking.com/config/{userconfig_id}/'
-	url_ignore_issue_id_template = 'https://firebase-app-crash.dqs.booking.com/crashdetail_user/{userconfig_id}/ignore-issue-id/{issue_id}/'
+	## DQS url :
+	#url_crashlist_template = "https://firebase-app-crash.dqs.booking.com/crashdetail_user/{userconfig_id}/"
+	#url_userconfig_template = 'https://firebase-app-crash.dqs.booking.com/config/{userconfig_id}/'
+	#url_ignore_issue_id_template = 'https://firebase-app-crash.dqs.booking.com/crashdetail_user/{userconfig_id}/ignore-issue-id/{issue_id}/'
 
 	# PROD url :
-	#url_crashlist_template = "https://firebase-app-crash.prod.booking.com/crashdetail_user/{userconfig_id}/"
-	#url_userconfig_template = 'https://firebase-app-crash.prod.booking.com/config/{userconfig_id}/'
-	#url_ignore_issue_id_template = 'https://firebase-app-crash.prod.booking.com/crashdetail_user/{userconfig_id}/ignore-issue-id/{issue_id}/'
+	url_crashlist_template = "https://firebase-app-crash.prod.booking.com/crashdetail_user/{userconfig_id}/"
+	url_userconfig_template = 'https://firebase-app-crash.prod.booking.com/config/{userconfig_id}/'
+	url_ignore_issue_id_template = 'https://firebase-app-crash.prod.booking.com/crashdetail_user/{userconfig_id}/ignore-issue-id/{issue_id}/'
 
 	url_firebase_template = "https://console.firebase.google.com/u/0/project/booking-oauth/crashlytics/app/{bookingApp}/issues/{issue_id}?time={timeslot}"
 
@@ -121,7 +120,7 @@ class Report:
 		# issue_id, title , crash_count, user_total, app_version	
 		self.report_issue_content= []
 		self.userconfig_table='userconfig_config'
-		self.crash_table='CrashIssuesDbg'
+		self.crash_table='CrashIssues'
 		self.order_issue = False 
 		self.config_id = config_id
 
@@ -283,4 +282,72 @@ class Report:
 		print("*****************\n",msg,"******************\n")
 		#bookingValue = "Think Customer First. Own it. ------Booking Value"
 		#msg = msg + bookingValue
+		return msg
+
+	def generateWeeklyEmailMsg(self):
+		if not self.report_issue_content:
+			self.get_report_issue_content()
+		
+		# TODO: read data in database 
+		msg = ""	
+		
+		if self.total_issue_count == 0:
+			print('Weekly: generateWeeklyEmailMsg Empty Content\n')
+			msg = '<h3>Good Job, no crashes detected for configuration  {team} , we will continue monitoring</h3>'.format(
+				team=self.team	
+			)
+
+			msg = msg + "<h3>NO Crashes retrieved based on you(team) <a href='{url_userconfig}'>configurations</a></h3>\
+				<h3>We will continue monitoring crashes for you </h3>\
+				<h3>Feel Free to adjust the configurations <a href='{url_userconfig}'>Here</a></h3>".format(url_userconfig=self.url_userconfig)
+		else:
+			print('Weekly: generateWeeklyEmailMsg NA Empty Content\n')
+			# order issue by user count 
+			msg = '<h2>[{platform}] has {count} Issues Detected for {team} during {timeslot}</h2>'.format(
+											platform=self.platform, 
+											count=self.total_issue_count, 
+											team=self.team,
+											timeslot = timeslot
+											)
+			# if total_issue > 3
+			msg = msg + "<h3>Crashes retrieved based on you(team) <a href='{url_userconfig}'>configurations</a></h3>\
+				<h3>If you want to unsubscribe some crashes above please go <a href='{url_crashlist}'>Here</a></h3>\
+				<h3>and click Ignore btn</h3>".format(url_crashlist=self.url_crashlist,url_userconfig=self.url_userconfig)
+
+		print("[Email Message] >>>> \n",msg)
+		print("[Email End]>>>>>>>>>>>>>>>>>>>>> \n",msg)
+		return msg
+	
+	def generateWeeklySlackMsg(self):
+		if not self.report_issue_content:
+			self.get_report_issue_content()
+		# TODO: read data in database 
+		msg = ""	
+		if self.total_issue_count == 0:
+			print('generateWeeklySlackMsg Empty Content\n')
+			msg = ':memo: Good Job, no crashes detected for configuration *{team}*, we will continue monitoring\\n'.format(
+				team=self.team	
+			)
+
+			msg = msg + '*[Notes]* NO Crashes retrieved based on you(team) <{url_userconfig}|configurations>\
+				\\n>If you want to modify crash monitor configurations please go <{url_userconfig}|Here>\
+				\\n>and click Update btn\\n'.format(url_userconfig=self.url_userconfig)
+		else:
+			print('Weekly: generateWeeklySlackMsg NA Empty Content\n')
+			# order issue by user count 
+			msg = ':memo: *[{platform}]* has *{count}* Issues Detected for *{team}* during {timeslot}\\n'.format(
+											platform=self.platform, 
+											count=self.total_issue_count, 
+											team=self.team,
+											timeslot = timeslot
+											)
+			# if total_issue > 3 
+			msg = msg + '*[Notes]* Crashes retrieved based on you(team) <{url_userconfig}|configurations>\
+				\\n>If you want to unsubscribe some crashes above please go <{url_crashlist}|Here>\
+				\\n>and click *Ignore* btn\\n'.format(url_crashlist=self.url_crashlist,url_userconfig=self.url_userconfig)
+			msg = msg + '---------------------------------------------------\\n'
+
+			print("*****************\n",msg,"******************\n")
+			#bookingValue = "Think Customer First. Own it. ------Booking Value"
+			#msg = msg + bookingValue
 		return msg
\ No newline at end of file
diff --git a/FirebaseCrashH2/src/issues.py b/FirebaseCrashH2/src/issues.py
index edb1383..6cb0619 100644
--- a/FirebaseCrashH2/src/issues.py
+++ b/FirebaseCrashH2/src/issues.py
@@ -214,7 +214,6 @@ class Issue:
 		self.content['app_version']=static_data['app_version'] 	
 
 		# issue last updated timestamp
-		self.content['first_retrieve_timestamp'] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
 		self.content['last_update_timestamp'] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
 
 		# dict of issues
diff --git a/FirebaseCrashH2/src/utils.py b/FirebaseCrashH2/src/utils.py
index c74fbde..73d88bc 100644
--- a/FirebaseCrashH2/src/utils.py
+++ b/FirebaseCrashH2/src/utils.py
@@ -1,9 +1,10 @@
 #/usr/local/bin/python3
+#from FirebaseCrashH2.src.userconfig import CUser
 import issues
 import timelib 
 import dblib
 import firebase_db_common_lib 
-from datetime import datetime, date, timedelta
+from datetime import datetime, timedelta
 import userconfig
 
 from email_helper import EmailHelper,Report
@@ -16,7 +17,6 @@ import schedule
 import time
 
 import common_config
-import statics
 
 '''
 #########################
@@ -66,8 +66,10 @@ def dump_issues(issue_id_list, filename = 'issues.json'):
 
 	print('[Issues dump to ]:', os.path.abspath(filename))
 
-def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, table='CrashIssuesDbg', database='chinaqa'):
+def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, table='CrashIssues', database='chinaqa'):
+	#mydb = dblib.DB(database=database,acc_mode=acc_mode)
 	mydb = dblib.DB(database=database,acc_mode=acc_mode)
+	#conn=mydb.connect()
 	
 	INSERT_ISSUE_TO_DATABASE = '''
 		insert into {table}
@@ -82,7 +84,6 @@ def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, ta
 				event_timestamp, 
 				issue_logs, 
 				app_version_list, 
-				first_retrieve_timestamp,
 				last_update_timestamp
 			)
 		values
@@ -97,7 +98,6 @@ def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, ta
 				{event_timestamp},
 				{issue_logs}, 
 				{app_version_list}, 
-				{first_retrieve_timestamp},
 				{last_update_timestamp}
 			)
 		on duplicate key update	
@@ -135,7 +135,6 @@ def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, ta
 				event_timestamp= '"'+str(row['event_timestamp'])+'"',
 				issue_logs = '"'+str(row['issue_logs'])+'"',
 				app_version_list= '"'+str(row['app_version_list'])+'"',
-				first_retrieve_timestamp = '"'+str(row['first_retrieve_timestamp'])+'"',
 				last_update_timestamp= '"'+str(row['last_update_timestamp'])+'"'
 			)
 
@@ -145,7 +144,7 @@ def write_issues_to_crashissue_database(issue_id_list, acc_mode, table_index, ta
 			print('[sql_cmd]: ',insert_data_sql_cmd)
 			#print('>>> inserted item <<< ', curs.fetchone()['issue_logs'])
 		except:
-			print('[IGNORE issue commandline]: ', insert_data_sql_cmd)
+			print('[IGNORE issue]: ',issue_id )
 			skip_num+=1
 			skip_issue_list.append(issue_id)
 			continue
@@ -189,40 +188,57 @@ def send_notification(**userconfig_notification):
 	print("[Email Type] ",type(email_address))
 
 	email = EmailHelper()
-	DayofToday = datetime.today().strftime("%A")
-	if 'Sunday' in DayofToday:
-		print('Sunday weekly report')
-		print('Collecting weekly data ... ing ')
-		Wdata = statics.Wdata(config_id=config_id)
-		Wdata.get_weekly_new_issue()
-		Wdata.get_weekly_ignore_issue()
-		Wdata.get_weekly_itermittant_issue()
-  
-		slackmsg = Wdata.generateSlackMsg()
-		title = 'Weekly Report for Crashes'		
-		if slack_channel is not None:
-			for s in slack_channel.replace(" ","").split(","):
-				print('CALLING send_notification:slack_channel ....',config_id,s)
-				email.booking_send_slack("Weekly.Crash.Report",s, slackmsg)		
-	elif 'Saturday' in DayofToday:
-		print('Saturday do nothing ')
-	else:
-		# 'Asia/Shanghai'
-		report = Report(config_id=config_id)
-		emailmsg = report.generateEmailMsg()
-		slackmsg = report.generateSlackMsg()
-		title = 'Crash Monitor Notification'
-		#email.booking_send_email("China.Quality@booking.com", email_address, title, EmailMsg() )
-		if 'booking.com' in email_address:
-			for e in email_address.replace(" ","").split(","):
-				print('CALLING send_notification:email_channel ....',config_id,e)
-				print("[send_notification] email is :",e)
-				email.booking_send_email("Crash.Monitor@booking.com", e, title, emailmsg)
-				#email.booking_send_email("Crash.Monitor@booking.com", e, title, EmailMsg() )
-		if slack_channel is not None:
-			for s in slack_channel.replace(" ","").split(","):
-				print('CALLING send_notification:slack_channel ....',config_id,s)
-				email.booking_send_slack("Crash.Monitor",s, slackmsg)
+	report = Report(config_id=config_id)
+	emailmsg = report.generateEmailMsg()
+	slackmsg = report.generateSlackMsg()
+	title = 'Crash Monitor Notification'
+	#email.booking_send_email("China.Quality@booking.com", email_address, title, EmailMsg() )
+	if 'booking.com' in email_address:
+		for e in email_address.replace(" ","").split(","):
+			print('CALLING send_notification:email_channel ....',config_id,e)
+			print("[send_notification] email is :",e)
+			email.booking_send_email("Crash.Monitor@booking.com", e, title, emailmsg)
+			#email.booking_send_email("Crash.Monitor@booking.com", e, title, EmailMsg() )
+		if not 'jia.guo' in email_address:
+			email.booking_send_email("WatchOnU.Daily.Crashes",'#china_qa_crash_monitor', emailmsg)
+	if slack_channel is not None:
+		for s in slack_channel.replace(" ","").split(","):
+			print('CALLING send_notification:slack_channel ....',config_id,s)
+			email.booking_send_slack("Crash.Monitor",s, slackmsg)
+		# send to #china_qa_crash_monitor always 
+		if not 'china_qa_crash_monitor' in slack_channel:
+			email.booking_send_slack("WatchOnU.Daily.Crashes",'#china_qa_crash_monitor', slackmsg)
+
+
+# Weekly Status Report 
+def send_weekly_status(**userconfig_notification):
+	config_id = userconfig_notification['id']
+	email_address = userconfig_notification['email_address']
+	slack_channel = userconfig_notification['slack_channel']
+	print('CALLING send_weekly_status ....',config_id)
+	print("[Email Type] ",type(email_address))
+
+	email = EmailHelper()
+	report = Report(config_id=config_id)
+	emailmsg = report.generateWeeklyEmailMsg()
+	slackmsg = report.generateWeeklySlackMsg()
+	title = 'Weekly Static Report of Crash Monitor'
+	#email.booking_send_email("China.Quality@booking.com", email_address, title, EmailMsg() )
+	if 'booking.com' in email_address:
+		for e in email_address.replace(" ","").split(","):
+			print('CALLING send_notification:email_channel ....',config_id,e)
+			print("[send_notification] email is :",e)
+			email.booking_send_email("Weekly.Crashes@booking.com", e, title, emailmsg)
+			#email.booking_send_email("Crash.Monitor@booking.com", e, title, EmailMsg() )
+		if not 'jia.guo' in email_address:
+			email.booking_send_email("WatchOnU.Weekly.Crashes",'#china_qa_crash_monitor', emailmsg)
+	if slack_channel is not None:
+		for s in slack_channel.replace(" ","").split(","):
+			print('CALLING send_notification:slack_channel ....',config_id,s)
+			email.booking_send_slack("Weekly.Crashes",s, slackmsg)
+		# send to #china_qa_crash_monitor always 
+		if not 'china_qa_crash_monitor' in slack_channel:
+			email.booking_send_slack("WatchOnU.Weekly.Crashes",'#china_qa_crash_monitor', slackmsg)
 
 SELECT_EMAIL_SLACK_FROM_USERCONFIG_ID ='''
 	SELECT 
@@ -242,7 +258,8 @@ def get_email_slack_from_userconfig_id(userconfig_id,userconfig_database=usercon
 	curs=mydb.execute(select_email_slack_from_userconfig_id)
 	return curs.fetchone()
 
-def update_hit_issue_id_list_to_userconfig():
+def update_hit_issue_id_list_to_userconfig(configuser_id=None):
+	print('Daily:update_hit_issue_id_list_to_userconfig :',configuser_id)
 	CG = userconfig.ConfigGroup()
 	# fetch all userconfig in 
 	CG.get_userconfig_param()
@@ -250,6 +267,10 @@ def update_hit_issue_id_list_to_userconfig():
 
 	# all configuration in CG.configuser_list
 	for configuser in CG.configuser_list:
+		if configuser_id:
+			if str(configuser_id) != str(configuser['id']):
+				print('Daily: Skip NONE Expect configuser_id:',configuser_id)
+				continue
 		try:
 			print(" [INFO] Retrieve Crash for team",configuser['team'],"###",configuser['id'])
 			CU=userconfig.ConfigUser(**configuser)
@@ -265,6 +286,33 @@ def update_hit_issue_id_list_to_userconfig():
 			print("[Exceptions] :",str(e))
 			print(" >>> configuser content: ", configuser)	
 
+def weekly_update_hit_issue_id_list_to_userconfig(configuser_id=None):
+	print('Daily:update_hit_issue_id_list_to_userconfig :',configuser_id)
+	CG = userconfig.ConfigGroup()
+	# fetch all userconfig in 
+	CG.get_userconfig_param()
+	CG.get_configuser_issue_content_list()
+
+	# all configuration in CG.configuser_list
+	for configuser in CG.configuser_list:
+		if configuser_id:
+			if str(configuser_id) != str(configuser['id']):
+				print('Weekly: Skip NONE Expect configuser_id:',configuser_id)
+				continue		
+		try:
+			print(" [INFO] Retrieve Crash for team",configuser['team'],"###",configuser['id'])
+			CU=userconfig.ConfigUser(**configuser)
+			# step-1 filter all crashes based on crashcnt&totaluser from CrashIssueDbg
+			CU.filter_issue_content_by_crashcnt_totaluser()
+			CU.get_issue_with_files_and_keywords(write=True)
+
+			userconfig_id = configuser['id']	
+			userconfig_notification = get_email_slack_from_userconfig_id(userconfig_id)
+			send_weekly_status(**userconfig_notification)
+
+		except Exception as e:
+			print("[Exceptions] :",str(e))
+			print(" >>> configuser content: ", configuser)
 #########################
 #    Cron Jobs devops   #
 #########################
@@ -301,9 +349,7 @@ if __name__ == '__main__':
 	print("[main] Start retrieve at:{end_date}\n".format(end_date=end_date))
 	#job_get_all_crash()	
 	#schedule.every(180).minutes.at(":20").do(job_get_all_crash)
-	#schedule.every().day.at("3:00").do(job_get_all_crash)
-	schedule.every().day.at("6:00").do(job_get_all_crash)
-	#schedule.every().day.at("12:00").do(job_get_all_crash)
+	schedule.every().day.at("10:00:00").do(job_get_all_crash)
 	while True:
 		schedule.run_pending()
 		time.sleep(1)